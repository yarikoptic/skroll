#!/bin/bash

set -eu

red=$(tput setaf 1)
green=$(tput setaf 2)
reset=$(tput sgr0)
el=$(tput el)

# TODO cmdline args
usage () {
  echo "\
skroll [-m REGEXMATCHES] [-M REGEXMISSES] [-n nlines] [-i] [-l] [-c]

Pipe stdout of your command into skroll to get its output scrolled while
some lines you would like to be retained and output without scrolling.

  -m REGEX - lines which match REGEX will be retained/printed
  -M REGEX - lines which do not match REGEX will be retained/printed
  -n N     - number of lines to scroll 
  -i       - start retained lines with +N indicator on how many lines
             from previously printed
  -l       - number lines
  -c       - color retained output: misses green, matches red (if specified)
"
}

nlines=5 # testing ok
retain_misses=
#retain_misses=a
#retain_misses="ok *$"
retain_matches=
#retain_matches="fail *$"
sleepsec=
format_inc=
format_lineno=
format_color=

declare -A colors # test ok

while getopts "m:M:n:s:ilhc" opt
do
  case "$opt" in
      m) retain_matches="$OPTARG";;
      M) retain_misses="$OPTARG" ;;
      n) nlines="$OPTARG" ;;
      s) sleepsec="$OPTARG" ;;
      i) format_inc=1;;
      l) format_lineno=1;;
      c) format_color=1;;
      h) usage; exit 0 ;;
      *) usage; exit 2 ;;
  esac
done

if [ "$format_color" != '' ]; then
  colors[miss]=${green}
  colors[match]=${red}
  colors[reset]=${reset}
else
  colors[match]=
  colors[miss]=
  colors[reset]=
fi

nmatches=0
nmisses=0

lineno=0 # more fail

declare -a ring  # fail

ring_pos=0
# for some reason ${#ring} doesn't work inside functions - ring: unbound variable
# so we will keep a counter on how full ring is
ring_n=0

ring_add () {
    let "ring_pos+=1"
    if [ $ring_pos -gt $nlines ]; then
        let ring_pos=1
    fi
    if [ $ring_n -lt $nlines ]; then
        let "ring_n+=1"
    fi
    ring[$ring_pos]="$1"
}
 
scroll_the_ring() {
  for _ in "${ring[@]}"; do
    printf "$(tput cuu 1)${el}"
  done

  if [ $lineno -gt 1 ]; then
    # one more for status line, which shouldn't be done if we just started
    printf "$(tput cuu 1)${el}"
  fi

  #printf "RING(%d/%d): <%s>\n" "$ring_pos" "$ring_n" "${ring[*]}"
}

lastprinted=0
SECONDS=0
while IFS= read -r line; do  #ok
  lineno=$(($lineno + 1))
  line_pristine="$line"
  if [ "$format_lineno" != '' ]; then
    line="$lineno $line"
  fi
  retain=
  if [ ! -z "$retain_matches" ] && printf "%s\n" "$line_pristine" | grep -q "$retain_matches"; then
     retain=match
     nmatches=$(($nmatches + 1))
  fi
  if [ -z "$retain" ] && [ ! -z "$retain_misses" ] && ! { printf "%s\n" "$line_pristine" | grep -q "$retain_misses"; } then
     retain=miss
     nmisses=$(($nmisses + 1))
  fi
  
  # go to the top
  scroll_the_ring

  if [ "$retain" = '' ]; then
     # add to the ring
     ring_add "$line"
  else
     # just print it
     l="$line"
     if [ "$format_inc" != '' ]; then
       l="+$(($lineno-$lastprinted)) $l"
     fi
     printf "${colors[$retain]}%s${colors[reset]}\n" "$l"
     lastprinted=$lineno
  fi

  # print the ring
  for ring_line in "${ring[@]}"; do
     printf "%s\n" "$ring_line"
  done
  # print the status
  lps=
  if [ $SECONDS -gt 0 ]; then
    lps="($(($lineno/$SECONDS)) lps) "
  fi
  printf "lines: $lineno  elapsed: $SECONDS secs $lps retained matches: $nmatches misses: $nmisses\n"

  if [ "$sleepsec" != "" ]; then
    sleep $sleepsec
  fi
done
scroll_the_ring
#echo "RING: ${ring[@]}"
